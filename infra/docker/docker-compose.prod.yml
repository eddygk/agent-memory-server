version: '3.8'

services:
  api:
    build:
      context: ..
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - PORT=8000
      - LONG_TERM_MEMORY=True
      - WINDOW_SIZE=20
      - GENERATION_MODEL=gpt-4o-mini
      - EMBEDDING_MODEL=text-embedding-3-small
      - ENABLE_TOPIC_EXTRACTION=True
      - ENABLE_NER=True
    env_file:
      - .env  # Contains OPENAI_API_KEY, ANTHROPIC_API_KEY
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  worker:
    build:
      context: ..
      dockerfile: Dockerfile
    command: ["uv", "run", "agent-memory", "task-worker", "--concurrency", "10"]
    environment:
      - REDIS_URL=redis://redis:6379
      - LONG_TERM_MEMORY=True
      - WINDOW_SIZE=20
      - GENERATION_MODEL=gpt-4o-mini
      - EMBEDDING_MODEL=text-embedding-3-small
      - ENABLE_TOPIC_EXTRACTION=True
      - ENABLE_NER=True
    env_file:
      - .env  # Contains OPENAI_API_KEY, ANTHROPIC_API_KEY
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mcp:
    build:
      context: ..
      dockerfile: Dockerfile
    command: ["uv", "run", "agent-memory", "mcp", "--sse"]
    ports:
      - "9000:9000"
    environment:
      - REDIS_URL=redis://redis:6379
      - PORT=9000
      - LONG_TERM_MEMORY=True
      - WINDOW_SIZE=20
      - GENERATION_MODEL=gpt-4o-mini
      - EMBEDDING_MODEL=text-embedding-3-small
      - ENABLE_TOPIC_EXTRACTION=True
      - ENABLE_NER=True
    env_file:
      - .env  # Contains OPENAI_API_KEY, ANTHROPIC_API_KEY
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis/redis-stack:latest
    ports:
      - "16379:6379"  # Redis port
      - "18001:8001"  # RedisInsight port
    volumes:
      - redis_data:/data
    command: >
      redis-stack-server
      --save 60 1
      --loglevel warning
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
